Today is Tuesday December 3rd, 2024.
I opened up my practice asssessment and checked out the problems. 
I wasnt brave enough to start it yet lol
Instead I worked on my canvas projects. I really enjoyed learning all the new code.
Here are a few projects I worked on today.



#1. BREADTHED FIRST SEARCH!
/*
Write a function called breadthFirstSearch that takes two nodes as arguments and
will traverse the given graph breadth-first, returning true if there is a path
from the first node to the second, and false if there is not.

For this exercise, try to write your code from scratch. It's good practice!
*/

const adjList = {
    1: [2, 5],
    2: [1, 3, 5],
    3: [2, 4],
    4: [3, 5],
    5: [1, 2, 4],
    6: []
}

function breadthFirstSearch(start, end) {
  const queue = [start];
  const visited = new Set();

  while (queue.length > 0) {
    const current = queue.shift();

    if (current === end) {
      return true;
    }
if (!visited.has (current)) {
  visited.add(current);

  for (const neighbor of adjList[current]) {
    if (!visited.has(neighbor)) {
      queue.push(neighbor);
    }
  }
}
}

return false;

}

 console.log(breadthFirstSearch(1, 3)); // -> true
 console.log(breadthFirstSearch(4, 1)); // -> true
 console.log(breadthFirstSearch(6, 1)); // -> false


/******************** DO NOT MODIFY ANY CODE BELOW THIS LINE *****************/
module.exports = breadthFirstSearch;





#2. PRINT BREADTH FIRST
/*
Write a function called printBreadthFirst that will traverse the given graph
breadth-first, printing each node when visited exactly once, on a newline.
*/

const adjList = {
  1: [2, 5],
  2: [1, 3, 5],
  3: [2, 4],
  4: [3, 5, 6],
  5: [1, 2, 4],
  6: [4]
}

function printBreadthFirst(start) {
const visited = new Set();
const queue = [start];

while (queue.length > 0) {
  const current = queue.shift();

  if (!visited.has(current)){
    console.log(current);
    visited.add(current);
    for (const neighbor of adjList[current]){
      if (!visited.has(neighbor)){
        queue.push(neighbor);

      }
    }
  }
}
}

console.log("First Test:")
printBreadthFirst(3); // Prints 1 through 6 in Breadth-first order, starting with 3
                      // One possible solution:  3, 2, 4, 1, 5, 6
console.log("Second Test:")
printBreadthFirst(6); // Prints 1 through 6 in Breadth-first order, starting with 6
                      // One possible solution:  6, 4, 3, 5, 2, 1
console.log("Third Test:")
printBreadthFirst(4); // Prints 1 through 6 in Breadth-first order, starting with 4
                      // One possible solution:  4, 3, 5, 6, 2, 1


/******************** DO NOT MODIFY ANY CODE BELOW THIS LINE *****************/
module.exports = printBreadthFirst;





#3. BREADTH FIRST TRAVERSAL REFACTOR
/*
The output of your printBreadthFirst function in the Simple Breadth-First
Traversal project is useful for visualizing and debugging the traversal, but now
you need it to output the nodes in the graph in an array instead of printing
them. Refactor your implementation of printBreadthFirst that instead
of printing each node on a newline, the breadthFirstTraversal function adds each
node to a new array and returns the new array.
*/

const adjList = {
  1: [2, 5],
  2: [1, 3, 5],
  3: [2, 4],
  4: [3, 5, 6],
  5: [1, 2, 4],
  6: [4]
}

function breadthFirstTraversal(start) {
  const visited = new Set();
  const queue = [start];
  const result = [];

  while (queue.length > 0) {
    const current = queue.shift();
    if (!visited.has(current)) {
      result.push(current);
      visited.add(current);

      for (const neighbor of adjList[current]) {
        if (!visited.has(neighbor)) {
          queue.push(neighbor);
        }
      }
    }


  }

  return result;
}

 console.log(breadthFirstTraversal(3)); // [3, 2, 4, 1, 5, 6]
 console.log(breadthFirstTraversal(6)); // [6, 4, 3, 5, 2, 1]
 console.log(breadthFirstTraversal(4)); // [4, 3, 5, 6, 2, 1]


/******************** DO NOT MODIFY ANY CODE BELOW THIS LINE *****************/
module.exports = breadthFirstTraversal;



