Today is December 5th, 2024.
I worked on my canvas projects. Thankfully its only 2 problems.
It will give me time to get this practice assesment finished!
Here is my work from canvas.


## What is a Matrix Graph?
  A matrix graph is a way to represent a graph using a 2D array (matrix).
Graphs consist of nodes (vertices) and edges (connections between nodes). 
In matrix graph practice, we use a matrix to indicate whether there is a connection (edge) between any two nodes.

*Adjacency Matrix
One common way to represent a graph is through an adjacency matrix. Here's how it works:

*Nodes are represented by the rows and columns of the matrix.

*Edges are represented by the values in the matrix cells.





## Breadth First Search Path with Matrix Practice

function findNeighbors(node, matrix) {
    const [row, col] = node;
    const neighbors = [];
    const numRows = matrix.lenght;
    const numCols = matrix[0].length;

    // Up
if (row > 0) {
    neighbors.push([row - 1, col]);
}
    // Down
if (row < numRows - 1) {
    neighbors.push([row + 1, col]);

}
    // Left
if (col > 0) {
    neighbors.push([row, col -1]);
}

    // Right
if (col < numCols - 1) {
    neighbors.push([row, col +1]);
}
return neighbors;
    
}


function bfsPath(matrix, startNode, endValue) {
    const queue = [startNode];
    const visited = new Set();
    const path = [];

    visited.add(startNode.toString());

    while (queue.length > 0) {
        const currentNode = queue.shift();
        path.push(currentNode);

        const [row, col] = currentNode;
        if (matrix[row][col === endValue]){
            return path;
        }
    const neighbors = findNeighbors(currentNode, matrix);
    for (const neighbor of neighbors) {
        const neighborString = neighbor.toString();
        if (!visited.has(neighborString)) {
            visited.add(neighborString);
            queue.push(neighbor);
        }
    }
    }
    return false;
}


// ***** UNCOMMENT FOR LOCAL TESTING *****

 const matrix1 = [ 
     [  1,  2,  3,  4 ],
     [  5,  6,  7,  8 ],
     [  9, 10, 11, 12 ],
     [ 13, 14, 15, 16 ]
 ];

// // EXAMPLE TESTS #1. Tests for findNeighbors function
 console.log(findNeighbors([1,1], matrix1)) // Finds all 4 neighbors from an
// // internal node (left, right, down, up)
// // [ [ 0, 1 ], [ 2, 1 ], [ 1, 2 ], [ 1, 0 ] ]

 console.log(findNeighbors([0,0], matrix1)); // Finds two neighbors from a
// // corner node // [ [ 1, 0 ], [ 0, 1 ] ]

console.log(findNeighbors([3,1], matrix1)); // Finds three neighbors from
// // an edge node // [ [ 2, 1 ], [ 3, 2 ], [ 3, 0 ] ]


// EXAMPLE TESTS #2. Tests for bfsPath function

// console.log(bfsPath(matrix1, [0,0], 16)); // can traverse the entire matrix
// returns an array of coordinates with no duplicates:

// [
//     [ 0, 0 ], [ 1, 0 ],
//     [ 0, 1 ], [ 2, 0 ],
//     [ 1, 1 ], [ 0, 2 ],
//     [ 3, 0 ], [ 2, 1 ],
//     [ 1, 2 ], [ 0, 3 ],
//     [ 3, 1 ], [ 2, 2 ],
//     [ 1, 3 ], [ 3, 2 ],
//     [ 2, 3 ], [ 3, 3 ]
//  ]

// Note for debugging purposes: The coordinates should represent the following matrix values, in order:
// 1 5 2 9 6 3 13 10 7 4 14 11 8 15 12 16

// console.log(bfsPath(matrix1, [2,2], 11)); // returns a single node if end
// // value is located at start node
// // [ [ 2, 2 ] ]

// console.log(bfsPath(matrix1, [1,2], 8)); // can handle various start nodes 
// // and end values
// // [ [ 1, 2 ], [ 0, 2 ], [ 2, 2 ], [ 1, 1 ], [ 1, 3 ] ]

// console.log(bfsPath(matrix1, [0,0], 17)); // can return false if end value 
// // is not found
// // false

/*************DO NOT MODIFY UNDER THIS LINE ***************/

module.exports = [findNeighbors, bfsPath];





## Solving Graph Problems Practice

function getNeighbors(row, col, graph) {
  const neighbors = [];
  const numRows = graph.length;
  const numCols = graph[0].length;

  // Check top
  if (row > 0 && graph[row - 1][col] === 1) {
    neighbors.push([row - 1, col]);
  }

  // Check bottom
if (row < numRows - 1 && graph[row + 1][col] === 1) {
  neighbors.push([row + 1, col]);
}
  // Check left
if (col > 0 && graph[row][col - 1] === 1){
  neighbors.push([row, col -1]);
}
  // Check right
  if (col < numCols - 1 && graph[row][col +1] === 1) {
    neighbors.push([row, col +1]);
  }

  return neighbors;

}


function islandSize(row, col, graph) {

  // Create a visited set to store visited nodes
  const visited = new Set();

  // Create a stack, put the starting node in the stack
const stack = [[row, col]];

  // Put the stringified starting node in visited
visited.add(`${row},${col}`);

  // Initialize size to 0
  let size = 0;

  // While the stack is not empty,
while (stack.length > 0){
  // Pop the first node
  const [currentRow, currentCol] = stack.pop();
  // DO THE THING (increment size by 1)
  size += 1;

  console.log(`Visiting node: (${currentRow}, ${currentCol}), Current island size: ${size}`);
    
  // Then push all the UNVISITED neighbors on top of the stack
    // and mark them as visited
    const neighbors = getNeighbors(currentRow, currentCol, graph);
    for (const neighbor of neighbors) {
      const [neighborRow, neighborCol] = neighbor;
      const neighborString = `${neighborRow},${neighborCol}`;
      if (!visited.has(neighborString)) {
        visited.add(neighborString);
        stack.push(neighbor);

      }
    }
  }
return size;
    // HINT: This is what your helper function `getNeighbors` is for
    // HINT: Remember, you're storing your visited nodes as strings!

  // return size
}

module.exports = [getNeighbors, islandSize];






